(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{312:function(t,s,a){"use strict";a.r(s);var i=a(10),n=Object(i.a)({},(function(){var t=this._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[t("h2",{attrs:{id:"js中数组push对象-原有的值总是被最后一次的值覆盖的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js中数组push对象-原有的值总是被最后一次的值覆盖的问题"}},[this._v("#")]),this._v(" js中数组push对象，原有的值总是被最后一次的值覆盖的问题")]),this._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('<script setup lang="ts">\ninterface List {\n    idx?: number,\n    value: string\n}\nconst dataList: List[] = reactive([])\nconst list:List = {value:\'\'}\nconst addInput = () => {\n    data.idx = dataList.length+1\n    dataList.push(list)\n\tconsole.log(dataList)\n}\n<\/script>\n输出dataList的值\n//[{"value":"","idx":1}]\n//[{"value":"","idx":2},{"value":"","idx":2}]\n//[{"value":"","idx":3},{"value":"","idx":3},{"value":"","idx":3}]\n')])])]),t("p",[this._v("原因：dataList中保存的是list的地址，最后一次改变list.name以后，dataList中引用的地址的值也已经被改变。")]),this._v(" "),t("p",[this._v("解决方案：最简单的就把list的定义写在方法内部。其他方案自行研究")])])}),[],!1,null,null,null);s.default=n.exports}}]);