(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{306:function(s,o,e){"use strict";e.r(o);var v=e(14),_=Object(v.a)({},(function(){var s=this,o=s._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[o("h1",{attrs:{id:"前言"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),o("ul",[o("li",[s._v("基于 HTTP 的前端鉴权背景")]),s._v(" "),o("li",[s._v("cookie 为什么是最方便的存储方案，有哪些操作 cookie 的方式")]),s._v(" "),o("li",[s._v("session 方案是如何实现的，存在哪些问题")]),s._v(" "),o("li",[s._v("token 方案是如何实现的，如何进行编码和防篡改？jwt 是做什么的？refresh token 的实现和意义")]),s._v(" "),o("li",[s._v("session 和 token 有什么异同和优缺点")]),s._v(" "),o("li",[s._v("单点登录是什么？实现思路和在浏览器下的处理")])]),s._v(" "),o("h1",{attrs:{id:"cookie"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[s._v("#")]),s._v(" cookie")]),s._v(" "),o("h2",{attrs:{id:"什么是-cookie"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#什么是-cookie"}},[s._v("#")]),s._v(" 什么是 Cookie")]),s._v(" "),o("p",[o("strong",[s._v("HTTP 是无状态的协议（对于事务处理没有记忆能力，每次客户端和服务端会话完成时，服务端不会保存任何会话信息")]),s._v("）：每个请求都是完全独立的，服务端无法确认当前访问者的身份信息，无法分辨上一次的请求发送者和这一次的发送者是不是同一个人。所以服务器与浏览器为了进行会话跟踪（知道是谁在访问我），就必须主动的去维护一个状态，这个状态用于告知服务端前后两个请求是否来自同一浏览器。而这个状态需要通过 cookie 或者 session 去实现。")]),s._v(" "),o("p",[o("strong",[s._v("cookie 存储在客户端：")]),s._v(" cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。")]),s._v(" "),o("p",[o("strong",[s._v("cookie 是不可跨域的：")]),s._v(" 每个 cookie 都会绑定单一的域名，无法在别的域名下获取使用，"),o("strong",[s._v("一级域名和二级域名之间是允许共享使用的")]),s._v("（"),o("strong",[s._v("靠的是 domain）")]),s._v("。")]),s._v(" "),o("p",[s._v("cookie 也是前端存储的一种，但相比于 localStorage 等其他方式，借助 HTTP 头、浏览器能力，cookie 可以做到前端无感知。一般过程是这样的：")]),s._v(" "),o("ul",[o("li",[s._v("在提供标记的接口，通过 HTTP 返回头的 Set-Cookie 字段，直接「种」到浏览器上")]),s._v(" "),o("li",[s._v("浏览器发起请求时，会自动把 cookie 通过 HTTP 请求头的 Cookie 字段，带给接口")])]),s._v(" "),o("p",[o("strong",[s._v("常用配置")])]),s._v(" "),o("table",[o("thead",[o("tr",[o("th",[s._v("属性")]),s._v(" "),o("th",[s._v("说明")])])]),s._v(" "),o("tbody",[o("tr",[o("td",[o("strong",[s._v("name=value")])]),s._v(" "),o("td",[s._v("键值对，设置 Cookie 的名称及相对应的值，都必须是"),o("strong",[s._v("字符串类型")]),s._v(" - 如果值为 Unicode 字符，需要为字符编码。 - 如果值为二进制数据，则需要使用 BASE64 编码。")])]),s._v(" "),o("tr",[o("td",[o("strong",[s._v("domain")])]),s._v(" "),o("td",[s._v("指定 cookie 所属域名，默认是当前域名")])]),s._v(" "),o("tr",[o("td",[o("strong",[s._v("path")])]),s._v(" "),o("td",[o("strong",[s._v("指定 cookie 在哪个路径（路由）下生效，默认是 '/'")]),s._v("。 如果设置为 "),o("code",[s._v("/abc")]),s._v("，则只有 "),o("code",[s._v("/abc")]),s._v(" 下的路由可以访问到该 cookie，如："),o("code",[s._v("/abc/read")]),s._v("。")])]),s._v(" "),o("tr",[o("td",[o("strong",[s._v("maxAge")])]),s._v(" "),o("td",[s._v("cookie 失效的时间，单位秒。如果为整数，则该 cookie 在 maxAge 秒后失效。如果为负数，该 cookie 为临时 cookie ，关闭浏览器即失效，浏览器也不会以任何形式保存该 cookie 。如果为 0，表示删除该 cookie 。默认为 -1。 - "),o("strong",[s._v("比 expires 好用")]),s._v("。")])]),s._v(" "),o("tr",[o("td",[o("strong",[s._v("expires")])]),s._v(" "),o("td",[s._v("过期时间，在设置的某个时间点后该 cookie 就会失效。 一般浏览器的 cookie 都是默认储存的，当关闭浏览器结束这个会话的时候，这个 cookie 也就会被删除")])]),s._v(" "),o("tr",[o("td",[o("strong",[s._v("secure")])]),s._v(" "),o("td",[s._v("该 cookie 是否仅被使用安全协议传输。安全协议有 HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false。 当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效。")])]),s._v(" "),o("tr",[o("td",[o("strong",[s._v("httpOnly")])]),s._v(" "),o("td",[o("strong",[s._v("如果给某个 cookie 设置了 httpOnly 属性，则无法通过 JS 脚本 读取到该 cookie 的信息，但还是能通过 Application 中手动修改 cookie，所以只是在一定程度上可以防止 XSS 攻击，不是绝对的安全")])])])])]),s._v(" "),o("h2",{attrs:{id:"使用-cookie-时需要考虑的问题"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#使用-cookie-时需要考虑的问题"}},[s._v("#")]),s._v(" 使用 cookie 时需要考虑的问题")]),s._v(" "),o("ul",[o("li",[s._v("因为存储在客户端，容易被客户端篡改，使用前需要验证合法性")]),s._v(" "),o("li",[s._v("不要存储敏感数据，比如用户密码，账户余额")]),s._v(" "),o("li",[s._v("使用 httpOnly 在一定程度上提高安全性")]),s._v(" "),o("li",[s._v("尽量减少 cookie 的体积，能存储的数据量不能超过 4kb")]),s._v(" "),o("li",[s._v("设置正确的 domain 和 path，减少数据传输")]),s._v(" "),o("li",[o("strong",[s._v("cookie 无法跨域")])]),s._v(" "),o("li",[s._v("一个浏览器针对一个网站最多存 20 个Cookie，浏览器一般只允许存放 300 个Cookie")]),s._v(" "),o("li",[o("strong",[s._v("移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token")])])]),s._v(" "),o("h1",{attrs:{id:"session"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#session"}},[s._v("#")]),s._v(" session")]),s._v(" "),o("h2",{attrs:{id:"什么是-session"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#什么是-session"}},[s._v("#")]),s._v(" 什么是 Session")]),s._v(" "),o("ul",[o("li",[o("strong",[s._v("session 是另一种记录服务器和客户端会话状态的机制")])]),s._v(" "),o("li",[o("strong",[s._v("session 是基于 cookie 实现的，session 存储在服务器端，sessionId 会被存储到客户端的cookie 中")])])]),s._v(" "),o("p",[o("strong",[s._v("session 认证流程：")])]),s._v(" "),o("ol",[o("li",[s._v("用户第一次请求服务器的时候，服务器根据用户提交的相关信息，创建对应的 Session")]),s._v(" "),o("li",[s._v("请求返回时将此 Session 的唯一标识信息 SessionID 返回给浏览器")]),s._v(" "),o("li",[s._v("浏览器接收到服务器返回的 SessionID 信息后，会将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名")]),s._v(" "),o("li",[s._v("当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie 信息，如果存在自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。")])]),s._v(" "),o("p",[o("strong",[s._v("SessionID 是连接 Cookie 和 Session 的一道桥梁")]),s._v("，大部分系统也是根据此原理来验证用户登录状态。")]),s._v(" "),o("h2",{attrs:{id:"分布式session管理"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#分布式session管理"}},[s._v("#")]),s._v(" 分布式session管理")]),s._v(" "),o("h3",{attrs:{id:"单体架构"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#单体架构"}},[s._v("#")]),s._v(" "),o("strong",[s._v("单体架构")])]),s._v(" "),o("p",[s._v("在早期的单体架构中，也就是"),o("strong",[s._v("只有一台web服务器")]),s._v("，虽然在web应用中也进行的分层设计，但其实本质是在代码逻辑级别，"),o("strong",[s._v("本身还是一个应用而已")]),s._v("（或者说就是一个war/jar包）。")]),s._v(" "),o("p",[s._v("这个时期的session都是"),o("strong",[s._v("保存在本地的web服务器内存中")]),s._v("，非常简单就能保持用户状态。")]),s._v(" "),o("h3",{attrs:{id:"集群-分布式架构"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#集群-分布式架构"}},[s._v("#")]),s._v(" "),o("strong",[s._v("集群/分布式架构")])]),s._v(" "),o("p",[s._v("随着业务的"),o("strong",[s._v("复杂度升高，和对应用性能、高可用的需求，系统演变成了集群和分布式架构")]),s._v("。")]),s._v(" "),o("p",[o("strong",[s._v("集群架构")]),s._v("可以看服务器A和服务器B，部署同一个应用A，就是为了提升性能和高可用目的；")]),s._v(" "),o("p",[s._v("服务器C是部署了另一个应用B，"),o("strong",[s._v("代表系统不是单一业务")]),s._v("，而是多个应用集合的，"),o("strong",[s._v("即分布式架构。")])]),s._v(" "),o("p",[s._v("这个架构中，之前的session方案就会有问题，因为"),o("strong",[s._v("服务器端的session是存放在本地内存中")]),s._v("的。")]),s._v(" "),o("p",[s._v("流程：")]),s._v(" "),o("p",[s._v("1、用户A第一次访问系统，由负载均衡器映射"),o("strong",[s._v("到服务器A中")]),s._v("\n2、会在"),o("strong",[s._v("服务器A的本地内存中，存放着session")]),s._v("\n3、用户A第二次访问系统，又被"),o("strong",[s._v("随机分配到了服务器B中")]),s._v("\n4、但服务器B中是"),o("strong",[s._v("没有存放用户A的session的")]),s._v("，所以此sessionId在服务器B中找不到对应的session，就会"),o("strong",[s._v("以为用户没有登录")]),s._v("，就会引导用户去登录\n5、这样就导致"),o("strong",[s._v("session不一致的问题")]),s._v("。")]),s._v(" "),o("p",[s._v("解决方案：")]),s._v(" "),o("ul",[o("li",[s._v("一是从「存储」角度，把 session 集中存储。如果我们用独立的 Redis 或普通数据库，就可以把 session 都存到一个库里。 （通常使用）")]),s._v(" "),o("li",[s._v("二是从「分布」角度，让相同 IP 的请求在负载均衡时都打到同一台机器上。以 nginx 为例，可以配置 ip_hash 来实现。")])]),s._v(" "),o("h2",{attrs:{id:"使用-session-时需要考虑的问题"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#使用-session-时需要考虑的问题"}},[s._v("#")]),s._v(" 使用 session 时需要考虑的问题")]),s._v(" "),o("ul",[o("li",[s._v("将 session 存储在服务器里面，当用户同时在线量比较多时，这些 session 会占据较多的内存，需要在服务端定期的去清理过期的 session")]),s._v(" "),o("li",[s._v("当网站采用"),o("strong",[s._v("集群部署")]),s._v("的时候，会遇到多台 web 服务器之间如何做 session 共享的问题。因为 session 是由单个服务器创建的，但是处理用户请求的服务器不一定是那个创建 session 的服务器，那么该服务器就无法拿到之前已经放入到 session 中的登录凭证之类的信息了。")]),s._v(" "),o("li",[s._v("当多个应用要共享 session 时，除了以上问题，还会遇到跨域问题，因为不同的应用可能部署的主机不一样，需要在各个应用做好 cookie 跨域的处理。")]),s._v(" "),o("li",[o("strong",[s._v("sessionId 是存储在 cookie 中的，假如浏览器禁止 cookie 或不支持 cookie 怎么办？")]),s._v(" 一般会把 sessionId 跟在 url 参数后面即重写 url，所以 session 不一定非得需要靠 cookie 实现")]),s._v(" "),o("li",[o("strong",[s._v("移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token")])])]),s._v(" "),o("p",[s._v("对 session 来说，除非程序通知服务器删除一个 session，否则服务器会一直保留，程序一般都是在用户做 log off 的时候发个指令去删除 session。然而浏览器从来不会主动在关闭之前通知服务器它将要关闭，因此服务器根本不会有机会知道浏览器已经关闭 。")]),s._v(" "),o("p",[o("strong",[s._v("关闭浏览器不会导致 session 被删除，迫使服务器为 session 设置了一个失效时间，当距离客户端上一次使用 session 的时间超过这个失效时间时，服务器就认为客户端已经停止了活动，才会把 session 删除以节省存储空间。")])]),s._v(" "),o("h1",{attrs:{id:"cookie-和-session-的区别"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#cookie-和-session-的区别"}},[s._v("#")]),s._v(" Cookie 和 Session 的区别")]),s._v(" "),o("p",[o("strong",[s._v("安全性：")]),s._v(" Session 比 Cookie 安全，Session 是存储在服务器端的，Cookie 是存储在客户端的。")]),s._v(" "),o("p",[o("strong",[s._v("存取值的类型不同")]),s._v("：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。")]),s._v(" "),o("p",[o("strong",[s._v("有效期不同：")]),s._v(" Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。")]),s._v(" "),o("p",[o("strong",[s._v("存储大小不同：")]),s._v(" 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。")]),s._v(" "),o("h1",{attrs:{id:"token"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#token"}},[s._v("#")]),s._v(" token")]),s._v(" "),o("h2",{attrs:{id:"什么是-token-令牌"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#什么是-token-令牌"}},[s._v("#")]),s._v(" 什么是 Token（令牌）")]),s._v(" "),o("p",[o("strong",[s._v("访问资源接口（API）时所需要的资源凭证")])]),s._v(" "),o("p",[o("strong",[s._v("简单 token 的组成：")]),s._v(" uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign（签名，token 的前几位以哈希算法压缩成的一定长度的十六进制字符串）")]),s._v(" "),o("p",[o("strong",[s._v("特点：")])]),s._v(" "),o("ul",[o("li",[o("strong",[s._v("服务端无状态化、可扩展性好")])]),s._v(" "),o("li",[o("strong",[s._v("支持移动端设备")])]),s._v(" "),o("li",[s._v("安全")]),s._v(" "),o("li",[s._v("支持跨程序调用")])]),s._v(" "),o("h2",{attrs:{id:"token-的身份验证流程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#token-的身份验证流程"}},[s._v("#")]),s._v(" "),o("strong",[s._v("token 的身份验证流程：")])]),s._v(" "),o("ol",[o("li",[s._v("客户端使用用户名跟密码请求登录")]),s._v(" "),o("li",[s._v("服务端收到请求，去验证用户名与密码")]),s._v(" "),o("li",[s._v("验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端")]),s._v(" "),o("li",[s._v("客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里")]),s._v(" "),o("li",[s._v("客户端每次向服务端请求资源的时候需要带着服务端签发的 token")]),s._v(" "),o("li",[s._v("服务端收到请求，然后去验证客户端请求里面带着的 token ，如果验证成功，就向客户端返回请求的数据")])]),s._v(" "),o("ul",[o("li",[o("strong",[s._v("每一次请求都需要携带 token，需要把 token 放到 HTTP 的 Header 里")])]),s._v(" "),o("li",[o("strong",[s._v("基于 token 的用户认证是一种服务端无状态的认证方式，服务端不用存放 token 数据。用解析 token 的计算时间换取 session 的存储空间，从而减轻服务器的压力，减少频繁的查询数据库")])]),s._v(" "),o("li",[o("strong",[s._v("token 完全由应用管理，所以它可以避开同源策略")])])]),s._v(" "),o("h2",{attrs:{id:"refresh-token"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#refresh-token"}},[s._v("#")]),s._v(" Refresh Token")]),s._v(" "),o("ul",[o("li",[s._v("另外一种 token——refresh token")]),s._v(" "),o("li",[s._v("refresh token 是专用于刷新 access token 的 token。如果没有 refresh token，也可以刷新 access token，但每次刷新都要用户输入登录用户名与密码，会很麻烦。有了 refresh token，可以减少这个麻烦，客户端直接用 refresh token 去更新 access token，无需用户进行额外的操作。")]),s._v(" "),o("li",[s._v("Access Token 的有效期比较短，当 Acesss Token 由于过期而失效时，使用 Refresh Token 就可以获取到新的 Token，如果 Refresh Token 也失效了，用户就只能重新登录了。")]),s._v(" "),o("li",[s._v("Refresh Token 及过期时间是存储在服务器的数据库中，只有在申请新的 Acesss Token 时才会验证，不会对业务接口响应时间造成影响，也不需要向 Session 一样一直保持在内存中以应对大量的请求。")])]),s._v(" "),o("h2",{attrs:{id:"使用-token-时需要考虑的问题"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#使用-token-时需要考虑的问题"}},[s._v("#")]),s._v(" 使用 token 时需要考虑的问题")]),s._v(" "),o("ul",[o("li",[s._v("如果你认为用数据库来存储 token 会导致查询时间太长，可以选择放在内存当中。比如 redis 很适合你对 token 查询的需求。")]),s._v(" "),o("li",[o("strong",[s._v("token 完全由应用管理，所以它可以避开同源策略")])]),s._v(" "),o("li",[o("strong",[s._v("token 可以避免 CSRF 攻击(因为不需要 cookie 了)")])]),s._v(" "),o("li",[o("strong",[s._v("移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token")])])]),s._v(" "),o("h1",{attrs:{id:"token-和-session-的区别"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#token-和-session-的区别"}},[s._v("#")]),s._v(" Token 和 Session 的区别")]),s._v(" "),o("ul",[o("li",[s._v("Session 是一种"),o("strong",[s._v("记录服务器和客户端会话状态的机制，使服务端有状态化，可以记录会话信息")]),s._v("。而 Token 是"),o("strong",[s._v("令牌")]),s._v("，"),o("strong",[s._v("访问资源接口（API）时所需要的资源凭证")]),s._v("。Token "),o("strong",[s._v("使服务端无状态化，不会存储会话信息。")])]),s._v(" "),o("li",[s._v("Session 和 Token 并不矛盾，作为身份认证 Token 安全性比 Session 好，因为每一个请求都有签名还能防止监听以及重放攻击，而 Session 就必须依赖链路层来保障通讯安全了。"),o("strong",[s._v("如果你需要实现有状态的会话，仍然可以增加 Session 来在服务器端保存一些状态。")])]),s._v(" "),o("li",[s._v("所谓 Session 认证只是简单的把 User 信息存储到 Session 里，因为 SessionID 的不可预测性，暂且认为是安全的。而 Token ，如果指的是 OAuth Token 或类似的机制的话，提供的是 认证 和 授权 ，认证是针对用户，授权是针对 App 。其目的是让某 App 有权利访问某用户的信息。这里的 Token 是唯一的。不可以转移到其它 App上，也不可以转到其它用户上。Session 只提供一种简单的认证，即只要有此 SessionID ，即认为有此 User 的全部权利。是需要严格保密的，这个数据应该只保存在站方，不应该共享给其它网站或者第三方 App。所以简单来说："),o("strong",[s._v("如果你的用户数据可能需要和第三方共享，或者允许第三方调用 API 接口，用 Token 。如果永远只是自己的网站，自己的 App，用什么就无所谓了")])])]),s._v(" "),o("h1",{attrs:{id:"jwt"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#jwt"}},[s._v("#")]),s._v(" JWT")]),s._v(" "),o("ul",[o("li",[s._v("JSON Web Token（简称 JWT）是目前最流行的"),o("strong",[s._v("跨域认证")]),s._v("解决方案。")]),s._v(" "),o("li",[s._v("是一种"),o("strong",[s._v("认证授权机制")]),s._v("。")]),s._v(" "),o("li",[s._v("JWT 是为了在网络应用环境间"),o("strong",[s._v("传递声明")]),s._v("而执行的一种基于 JSON 的开放标准（"),o("a",{attrs:{href:"https://link.juejin.cn/?target=https%3A%2F%2Ftools.ietf.org%2Fhtml%2Frfc7519",target:"_blank",rel:"noopener noreferrer"}},[s._v("RFC 7519"),o("OutboundLink")],1),s._v("）。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源。比如用在用户登录上。")]),s._v(" "),o("li",[s._v("可以使用 HMAC 算法或者是 RSA 的公/私秘钥对 JWT 进行签名。因为数字签名的存在，这些传递的信息是可信的。")])]),s._v(" "),o("h2",{attrs:{id:"jwt-认证流程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#jwt-认证流程"}},[s._v("#")]),s._v(" "),o("strong",[s._v("JWT 认证流程：")])]),s._v(" "),o("ul",[o("li",[s._v("用户输入用户名/密码登录，服务端认证成功后，会返回给客户端一个 JWT")]),s._v(" "),o("li",[s._v("客户端将 token 保存到本地（通常使用 localstorage，也可以使用 cookie）")]),s._v(" "),o("li",[s._v("当用户希望访问一个受保护的路由或者资源的时候，需要请求头的 Authorization 字段中使用Bearer 模式添加 JWT，其内容看起来是下面这样")])]),s._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[s._v("Authorization: Bearer <token>\n")])])]),o("ul",[o("li",[s._v("服务端的保护路由将会检查请求头 Authorization 中的 JWT 信息，如果合法，则允许用户的行为")]),s._v(" "),o("li",[s._v("因为 JWT 是自包含的（内部包含了一些会话信息），因此减少了需要查询数据库的需要")]),s._v(" "),o("li",[s._v("因为 JWT 并不使用 Cookie 的，所以你可以使用任何域名提供你的 API 服务而不需要担心跨域资源共享问题（CORS）")]),s._v(" "),o("li",[s._v("因为用户的状态不再存储在服务端的内存中，所以这是一种无状态的认证机制")])]),s._v(" "),o("h2",{attrs:{id:"jwt-的使用方式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#jwt-的使用方式"}},[s._v("#")]),s._v(" JWT 的使用方式")]),s._v(" "),o("ul",[o("li",[s._v("客户端收到服务器返回的 JWT，可以储存在 Cookie 里面，也可以储存在 localStorage。")])]),s._v(" "),o("h4",{attrs:{id:"方式一"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#方式一"}},[s._v("#")]),s._v(" 方式一")]),s._v(" "),o("ul",[o("li",[s._v("当用户希望访问一个受保护的路由或者资源的时候，可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以更好的做法是放在 HTTP 请求头信息的 Authorization 字段里，使用 Bearer 模式添加 JWT。")])]),s._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[s._v("GET /calendar/v1/events\nHost: api.example.com\nAuthorization: Bearer <token>\n")])])]),o("ul",[o("li",[s._v("用户的状态不会存储在服务端的内存中，这是一种 "),o("strong",[s._v("无状态的认证机制")])]),s._v(" "),o("li",[s._v("服务端的保护路由将会检查请求头 Authorization 中的 JWT 信息，如果合法，则允许用户的行为。")]),s._v(" "),o("li",[s._v("由于 JWT 是自包含的，因此减少了需要查询数据库的需要")]),s._v(" "),o("li",[s._v("JWT 的这些特性使得我们可以完全依赖其无状态的特性提供数据 API 服务，甚至是创建一个下载流服务。")]),s._v(" "),o("li",[s._v("因为 JWT 并不使用 Cookie ，所以你可以使用任何域名提供你的 API 服务而"),o("strong",[s._v("不需要担心跨域资源共享问题")]),s._v("（CORS）")])]),s._v(" "),o("h4",{attrs:{id:"方式二"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#方式二"}},[s._v("#")]),s._v(" 方式二")]),s._v(" "),o("ul",[o("li",[s._v("跨域的时候，可以把 JWT 放在 POST 请求的数据体里。")])]),s._v(" "),o("h4",{attrs:{id:"方式三"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#方式三"}},[s._v("#")]),s._v(" 方式三")]),s._v(" "),o("ul",[o("li",[s._v("通过 URL 传输")])]),s._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[s._v("http://www.example.com/user?token=xxx\n")])])]),o("h2",{attrs:{id:"使用-jwt-时需要考虑的问题"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#使用-jwt-时需要考虑的问题"}},[s._v("#")]),s._v(" 使用 JWT 时需要考虑的问题")]),s._v(" "),o("ul",[o("li",[s._v("因为 JWT 并不依赖 Cookie 的，所以你可以使用任何域名提供你的 API 服务而不需要担心跨域资源共享问题（CORS）")]),s._v(" "),o("li",[s._v("JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。")]),s._v(" "),o("li",[s._v("JWT 不加密的情况下，不能将秘密数据写入 JWT。")]),s._v(" "),o("li",[s._v("JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。")]),s._v(" "),o("li",[s._v("JWT 最大的优势是服务器不再需要存储 Session，使得服务器认证鉴权业务可以方便扩展。但这也是 JWT 最大的缺点：由于服务器不需要存储 Session 状态，因此使用过程中无法废弃某个 Token 或者更改 Token 的权限。也就是说一旦 JWT 签发了，到期之前就会始终有效，除非服务器部署额外的逻辑。")]),s._v(" "),o("li",[s._v("JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。")]),s._v(" "),o("li",[s._v("JWT 适合一次性的命令认证，颁发一个有效期极短的 JWT，即使暴露了危险也很小，由于每次操作都会生成新的 JWT，因此也没必要保存 JWT，真正实现无状态。")]),s._v(" "),o("li",[s._v("为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。")])]),s._v(" "),o("h1",{attrs:{id:"token-和-jwt-的区别"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#token-和-jwt-的区别"}},[s._v("#")]),s._v(" Token 和 JWT 的区别")]),s._v(" "),o("p",[o("strong",[s._v("相同：")])]),s._v(" "),o("ul",[o("li",[s._v("都是访问资源的令牌")]),s._v(" "),o("li",[s._v("都可以记录用户的信息")]),s._v(" "),o("li",[s._v("都是使服务端无状态化")]),s._v(" "),o("li",[s._v("都是只有验证成功后，客户端才能访问服务端上受保护的资源")])]),s._v(" "),o("p",[o("strong",[s._v("区别：")])]),s._v(" "),o("ul",[o("li",[s._v("Token：服务端验证客户端发送过来的 Token 时，还需要查询数据库获取用户信息，然后验证 Token 是否有效。")]),s._v(" "),o("li",[s._v("JWT： 将 Token 和 Payload 加密后存储于客户端，服务端只需要使用密钥解密进行校验（校验也是 JWT 自己实现的）即可，不需要查询或者减少查询数据库，因为 JWT 自包含了用户信息和加密的数据。")])]),s._v(" "),o("h2",{attrs:{id:"常见的前后端鉴权方式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#常见的前后端鉴权方式"}},[s._v("#")]),s._v(" 常见的前后端鉴权方式")]),s._v(" "),o("ol",[o("li",[s._v("Session-Cookie")]),s._v(" "),o("li",[s._v("Token 验证（包括 JWT，SSO）")]),s._v(" "),o("li",[s._v("OAuth2.0（开放授权）")])]),s._v(" "),o("h1",{attrs:{id:"总结"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),o("ul",[o("li",[s._v("HTTP 是无状态的，为了维持前后请求，需要前端存储标记")]),s._v(" "),o("li",[s._v("cookie 是一种完善的标记方式，通过 HTTP 头或 js 操作，有对应的安全策略，是大多数状态管理方案的基石")]),s._v(" "),o("li",[s._v("session 是一种状态管理方案，前端通过 cookie 存储 id，后端存储数据，但后端要处理分布式问题")]),s._v(" "),o("li",[s._v("token 是另一种状态管理方案，相比于 session 不需要后端存储，数据全部存在前端，解放后端，释放灵活性")]),s._v(" "),o("li",[s._v("token 的编码技术，通常基于 base64，或增加加密算法防篡改，jwt 是一种成熟的编码方案")]),s._v(" "),o("li",[s._v("在复杂系统中，token 可通过 service token、refresh token 的分权，同时满足安全性和用户体验")]),s._v(" "),o("li",[s._v("session 和 token 的对比就是「用不用cookie」和「后端存不存」的对比")])])])}),[],!1,null,null,null);o.default=_.exports}}]);