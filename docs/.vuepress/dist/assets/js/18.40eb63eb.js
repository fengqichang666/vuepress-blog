(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{290:function(n,e,t){"use strict";t.r(e);var o=t(14),s=Object(o.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("文档地址："),e("a",{attrs:{href:"https://www.npmjs.com/package/nodejs-websocket",target:"_blank",rel:"noopener noreferrer"}},[n._v("nodejs-websocket - npm (npmjs.com)"),e("OutboundLink")],1)]),n._v(" "),e("p",[n._v("服务端：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('const io = require(\'nodejs-websocket\')\nlet server = io.createServer((connection:any)=>{\n\t//server.connections  返回包含所有 connection 的数组，可以用来广播所有消息\n\tconsole.log(\'new connection...\')\n\t//客户端发送send过来的消息\n\tconnection.on("text",function(data){\n\t\tconsole.log("接收到的客户端消息:"+data);\n\t\t//服务端发送数据致客户端\n\t//connection.send(data, [callback]): 发送一个字符串或者二进制内容到客户端，如果发送的是文本，类似于\t// sendText()，如果发送的是二进制，类似于sendBinary(),\n\t\tconnection.send("服务器端返回的数据，客户端使用onmessage接收")\n\t\t\n\t})\n\t// 监听关闭\n    connection.on("close", function (code, reason) {\n        console.log("Connection closed")\n    })\n    // 监听异常  （比如：直接关闭浏览器窗口）\n\tconnection.on("error",(code) => {\n\t\tconsole.log(\'服务异常关闭...\')\n\t})\n}).listen(3333)\n\n')])])]),e("p",[n._v("客户端")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v(" const ws= new WebSocket('ws://127.0.0.1:3333')\n ws.onopen = () =>{\n    console.log('成功')\n    ws.send('发送至服务端的消息，服务端使用text事件接收')\n }\n //服务端send的数据\n ws.onmessage= (data) =>{\n    console.log(data.data)\n }\n ws.onclose = () =>{\n    console.log('close')\n }\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);