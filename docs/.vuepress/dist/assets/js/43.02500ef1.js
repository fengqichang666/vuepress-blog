(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{314:function(n,e,t){"use strict";t.r(e);var a=t(14),s=Object(a.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"目录改造及打包配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#目录改造及打包配置"}},[n._v("#")]),n._v(" 目录改造及打包配置")]),n._v(" "),e("p",[n._v("使用vue-cli创建一个新工程")]),n._v(" "),e("p",[e("img",{attrs:{src:"https://fengqichang666.github.io/images/directory.png",alt:""}})]),n._v(" "),e("p",[n._v("目录改造参考element")]),n._v(" "),e("p",[n._v("将src的目录文件改为examples，用来写组件相关文档和事例。")]),n._v(" "),e("p",[n._v("在根目录下新建一个 packages 文件夹，用来进行组件的编写。")]),n._v(" "),e("p",[n._v("在根目录下新建一个vue.config.js文件，修改入口文件地址为examples下的main.js,其次将packages加入打包编译任务中，配置如下")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("module.exports = {\n    pages: {\n        index: {\n            entry: 'examples/main.js',\n            template: 'public/index.html',\n            filename: 'index.html'\n        }\n    },\n    // 扩展 webpack 配置，使 packages 加入编译\n    chainWebpack: config => {\n        config.module\n            .rule('js')\n            .include\n            .add('/packages')\n            .end()\n            .use('babel')\n            .loader('babel-loader')\n    }\n}\n")])])]),e("h1",{attrs:{id:"编写组件代码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编写组件代码"}},[n._v("#")]),n._v(" 编写组件代码")]),n._v(" "),e("p",[n._v("在packages目录下新建一个button目录")]),n._v(" "),e("p",[n._v("button/src/index.vue")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("\x3c!--\n * @Author: feng\n * @Date: 2022-11-09 15:03:34\n * @LastEditTime: 2022-11-09 15:38:09\n * @Description: file content\n--\x3e\n<template>\n    <div class=\"x-button\">\n      <slot></slot>\n    </div>\n  </template>\n  \n  <script>\n  export default {\n    name: 'x-button',\n    props: {\n      type: String\n    }\n  }\n  <\/script>\n  \n  <style scoped>\n    .x-button {\n        display: inline-block;\n        padding: 3px 6px;\n        background: red;\n        color: #fff;\n    }\n  </style>\n")])])]),e("p",[n._v("button/index.js 单个组件的挂载")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 导入组件，组件必须声明 name\nimport XButton from './src'\n\n// 为组件提供 install 安装方法，供按需引入\nXButton.install = function (Vue) {\n  Vue.component(XButton.name, XButton)\n}\n\n// 导出组件\nexport default XButton\n")])])]),e("p",[n._v("packages/index.js  入口文件  导入所有组件并挂载")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 导入button组件\nimport XButton from './button'\n\n// 组件列表\nconst components = [\n  XButton\n]\n\n// 定义 install 方法，接收 Vue 作为参数。如果使用 use 注册插件，那么所有的组件都会被注册\nconst install = function (Vue) {\n  // 判断是否安装\n  if (install.installed) return\n  // 遍历注册全局组件\n  components.map(component => Vue.component(component.name, component))\n}\n\n// 判断是否是直接引入文件\nif (typeof window !== 'undefined' && window.Vue) {\n  install(window.Vue)\n}\n\nexport default {\n  // 导出的对象必须具有 install，才能被 Vue.use() 方法安装\n  install,\n  // 以下是具体的组件列表\n  XButton\n}\n")])])]),e("h1",{attrs:{id:"测试组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#测试组件"}},[n._v("#")]),n._v(" 测试组件")]),n._v(" "),e("p",[n._v("将组件导入到examples目录下的main.js中")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import Vue from 'vue'\nimport App from './App.vue'\n// 导入组件库\nimport myui from '../packages'\n\n// 注册组件库\nVue.use(myui)\n\nVue.config.productionTip = false\n\nnew Vue({\n  render: h => h(App)\n}).$mount('#app')\n\n\n")])])]),e("p",[n._v("这种方式是全局导入，至于按需导入，可以采用element的方式来配置")]),n._v(" "),e("p",[n._v("接下来我们就可以在项目中使用我们的组件了")]),n._v(" "),e("h1",{attrs:{id:"配置package-json文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置package-json文件"}},[n._v("#")]),n._v(" 配置package.json文件")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('"scripts": {\n    "serve": "vue-cli-service serve",\n    "build": "vue-cli-service build",\n    "lib": "vue-cli-service build --target lib --name myui --dest lib \t\t\t\t\t\t\tpackages/index.js",\n    "lint": "vue-cli-service --fixed lint"\n  },\n')])])]),e("p",[n._v("lib脚本就是用来打包packages的组件代码到lib目录下,文件名为以--name指定的名称前缀开头")]),n._v(" "),e("p",[n._v("编写package文件的description,keywords等,具体介绍如下:")]),n._v(" "),e("p",[e("em",[n._v("description 组件库的描述文本")])]),n._v(" "),e("p",[n._v("keywords 组件库的关键词")]),n._v(" "),e("p",[e("em",[n._v("license 许可协议")])]),n._v(" "),e("p",[n._v("repository 组件库关联的git仓库地址")]),n._v(" "),e("p",[e("em",[n._v("homepage 组件库展示的首页地址")])]),n._v(" "),e("p",[n._v("main 组件库的主入口地址(在使用组件时引入的地址)")]),n._v(" "),e("p",[e("em",[n._v("private 声明组件库的私有性,如果要发布到npm公网上,需删除该属性或者设置为false")])]),n._v(" "),e("p",[n._v("publishConfig 用来设置npm发布的地址,这个配置作为团队内部的npm服务器来说非常关键,可以设置为私有的npm仓库")]),n._v(" "),e("h1",{attrs:{id:"发布到npm"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发布到npm"}},[n._v("#")]),n._v(" 发布到npm")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 登录\n npm login\n // 发布\n npm publish\n // 如果发布失败提示权限问题,请执行以下命令\n npm publish --access public\n")])])]),e("p",[n._v("之后mian.js就可以通过如下方式使用")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 导入组件库\nimport myui from '../lib/myui.umd.min'\nimport '../lib/myui.css'\n// 注册组件库\nVue.use(myui)\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);