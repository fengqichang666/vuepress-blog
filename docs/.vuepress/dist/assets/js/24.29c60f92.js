(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{294:function(e,t,n){"use strict";n.r(t);var a=n(14),s=Object(a.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h2",{attrs:{id:"element-plus单选框无法更改问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#element-plus单选框无法更改问题"}},[e._v("#")]),e._v(" element-plus单选框无法更改问题")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<el-form ref="form" :model="form" class="mt15">\n \t<el-radio v-model="form.amtRadio" label="1">按钮1</el-radio>\n    <el-radio v-model="form.amtRadio" label="2">按钮2</el-radio>\n</el-form>\n\n')])])]),t("p",[e._v("发现单选按钮2无法选中")]),e._v(" "),t("p",[e._v("原因：el-form中绑定的ref 跟v-model 相同")]),e._v(" "),t("h2",{attrs:{id:"与elementui的表单样式区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#与elementui的表单样式区别"}},[e._v("#")]),e._v(" 与elementui的表单样式区别")]),e._v(" "),t("p",[e._v("elementui中 表单的label与content使用浮动保持在一行")]),e._v(" "),t("p",[e._v("elementplus中表单的item使用的display布局。")]),e._v(" "),t("h2",{attrs:{id:"ts如何通过中括号读取属性值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ts如何通过中括号读取属性值"}},[e._v("#")]),e._v(" Ts如何通过中括号读取属性值")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type form = {\n    amtRadio:string,\n    mainAmt:string,\n    subAmt:string\n}\nconst form = reactive<form>({\n    amtRadio: '1',\n    mainAmt: '',\n    subAmt:''\n})\nconst blurAmt = (key:string): void => {\n    console.log(form[key])   //ts会报错：类型\"String\"不能作为索引类型使用\n}\n解决方法：keyof typeof\nconst blurAmt = (key:keyof typeof form): void => {}\n")])])]),t("h2",{attrs:{id:"控制台警告-vue-warn-missing-required-prop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#控制台警告-vue-warn-missing-required-prop"}},[e._v("#")]),e._v(' 控制台警告： [Vue warn]:Missing required prop: "***"')]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('父组件：\n    <LayOut msg="Vue3 + Vite + Ts + Pinia" />\n子组件：\n\tdefineProps<{ msg: string }>()\n解决方案：\n子组件：\n\tdefineProps<{ msg?: string }>()\n')])])]),t("h2",{attrs:{id:"子组件更改接受到的对象数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#子组件更改接受到的对象数组"}},[e._v("#")]),e._v(" 子组件更改接受到的对象数组")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("数据类型:[{title:'',value:''},{title:'',value:''}]\n场景1\n父组件传过来的值，子组件需要在子组件更改为响应式\ntype item = {\n    title: string,\n    value: string\n}\nconst props = defineProps<{\n    info: Array<item>\n}>()\n//toRefs toRef无效\nconst info = ref(props.info) //重新ref（会改变父组件源对象，可深拷贝解决）\n\n简单数据类型\n<div>{{info}}</div>\nconst props =defineProps<{\n    xxx:string\n}>()\nconst info =ref(props.xxx)//父组件更改xxx值，子组件无响应。但是子组件可任意更改info值（影响不到父组件）\n\n解决方法  父组件更改xxx值，子组件同时发生改变，但是为只读。无法在子组件更改\n{{info.xxx}}\nconst info =toRefs(props)\n\n{{xxx}}\nconst info =toRef(props,'xxx')\n\n\n")])])]),t("p",[e._v("使用components.d.ts报错：找不到模块“./src/components/com.vue”或其相应的类型声明。")]),e._v(" "),t("p",[e._v('原因：tsconfig.json中需要在include中添加"components.d.ts"')]),e._v(" "),t("h2",{attrs:{id:"localstorage取值、赋值"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#localstorage取值、赋值"}},[e._v("#")]),e._v(" localStorage取值、赋值")]),e._v(" "),t("p",[e._v("直接使用JSON.parse(localStorage.getItem('****'))会报错  类型“string | null”的参数不能赋给类型“string”的参数。")]),e._v(" "),t("p",[e._v("解决方案  JSON."),t("strong",[e._v("parse")]),e._v("(localStorage."),t("strong",[e._v("getItem")]),e._v("('****') as string)  使用as关键字  类型断言")]),e._v(" "),t("h2",{attrs:{id:"超大静态资源拆分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#超大静态资源拆分"}},[e._v("#")]),e._v(" 超大静态资源拆分")]),e._v(" "),t("p",[e._v("vite打包警告：Some chunks are larger than 500 KiB after minification.")]),e._v(" "),t("p",[e._v("尚未解决：element-plus 600KiB依旧有警告")]),e._v(" "),t("p",[e._v("vite.config.ts：设置包名、拆分")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("build: {\n            rollupOptions: {\n                output: {\n                    chunkFileNames: 'static/js/[name]-[hash].js',\n                    entryFileNames: 'static/js/[name]-[hash].js',\n                    assetFileNames: 'static/[ext]/[name]-[hash].[ext]',\n                    manualChunks(id) { //静态资源分拆打包\n                        if (id.includes('node_modules')) {\n                            return id.toString().split('node_modules/')[1].split('/')[0].toString();\n                        }\n                    }\n                }\n            }\n        }\n")])])]),t("h2",{attrs:{id:"部署到hexo博客github-io-fast-page-hash模式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部署到hexo博客github-io-fast-page-hash模式"}},[e._v("#")]),e._v(" 部署到hexo博客github.io/fast-page （hash模式）")]),e._v(" "),t("p",[e._v("有的时候项目需要部署在服务器的子目录下，这时就要根据开发环境或生产环境动态配置 "),t("code",[e._v("vite.config.ts")]),e._v(" 中的 "),t("code",[e._v("base")]),e._v(" 选项")]),e._v(" "),t("p",[e._v("vite.config.ts：")]),e._v(" "),t("p",[t("code",[e._v("command")]),e._v(" 属性一共有两个值 "),t("code",[e._v("build")]),e._v(" 和 "),t("code",[e._v("serve")]),e._v("，对应了 "),t("code",[e._v("package.json")]),e._v(" 定义的脚本名称，分别为构建生产版本和开启开发服务。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("import { defineConfig, ConfigEnv } from 'vite'\nimport vue from '@vitejs/plugin-vue'\n\n// https://vitejs.dev/config/\nexport default defineConfig(({ command, mode }: ConfigEnv) => {\n    return {\n    \tplugins: [\n            vue()\n        ],\n        base: command === 'build' ? '/fast-page/' : '/'\n    }\n})\n")])])]),t("h3",{attrs:{id:"history路由模式需后端配合-放弃"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#history路由模式需后端配合-放弃"}},[e._v("#")]),e._v(" history路由模式需后端配合，放弃")]),e._v(" "),t("h2",{attrs:{id:"draggable拖动插件引起的问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#draggable拖动插件引起的问题"}},[e._v("#")]),e._v(" draggable拖动插件引起的问题")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('// 点击卡片右上角图标删除本条\n<el-icon  @click="del(element,index)">\n      <CloseBold />\n</el-icon>\n\nscript代码\nconst del = (item: List, i: number): void => {\n    dataList.splice(i, 1) // 页面显示\n    delItem(item) // 本地存储\n}\n')])])]),t("p",[e._v("有时候点击之后触发了del事件，本地存储的数据也已经删了。页面上没删掉。")]),e._v(" "),t("p",[e._v("解决方案：拖动过程中事件逻辑不让执行，拖动完成再触发")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const lock = ref(false)\n// draggable提供 拖动开始事件\nconst onStart = ():void =>{\n    lock.value = true\n}\n// draggable提供 拖动结束事件\nconst onEnd = ():void => {\n    lock.value = false\n}\nconst del = (item: List, i: number): void => {\n    if(lock.value){return}\n    dataList.splice(i, 1) // 页面显示\n    delItem(item) // 本地存储\n}\n")])])]),t("h2",{attrs:{id:"刷新页面-element-plus菜单选中样式与当前菜单不匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#刷新页面-element-plus菜单选中样式与当前菜单不匹配"}},[e._v("#")]),e._v(" 刷新页面，element-plus菜单选中样式与当前菜单不匹配")]),e._v(" "),t("p",[e._v("解决方案：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' <el-menu router :collapse-transition="false" :default-active="activeIndex">\n </el-menu>\n\nconst route = useRoute()\nconst activeIndex = ref(\'/okr\') // 定义默认\nactiveIndex.value = route.path // 刷新页面后，获取到当前的path\n')])])]),t("h2",{attrs:{id:"全局引入icon-switch组件active-icon与inactive-icon直接使用ts报错"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全局引入icon-switch组件active-icon与inactive-icon直接使用ts报错"}},[e._v("#")]),e._v(" 全局引入icon，switch组件active-icon与inactive-icon直接使用ts报错")]),e._v(" "),t("p",[e._v("场景：")]),e._v(" "),t("p",[e._v("在main.ts中import * as ElementPlusIconsVue from '@element-plus/icons-vue'全局使用icon")]),e._v(" "),t("p",[e._v("代码中直接使用报错：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' <el-switch v-model="darkTheme" class="mt-2" style="margin-left: 24px" inline-prompt\n                        :active-icon="Check" :inactive-icon="Close" />\n')])])]),t("p",[e._v("类型“{ $: ComponentInternalInstance; $data: {}; $props: Partial<{}> & Omit<Readonly<ExtractPropTypes<{}>> & VNodeProps & AllowedComponentProps & ComponentCustomProps, never>; ... 10 more ...; $watch(source: string | Function, cb: Function, options?: WatchOptions<...> | undefined): WatchStopHandle; } & ... 5 more ... & Sh...”上不存在属性“Check”。ts(2339)")]),e._v(" "),t("p",[e._v("解决方法：重新定义。。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("const Check = 'Check'\nconst Close = 'Close'\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);